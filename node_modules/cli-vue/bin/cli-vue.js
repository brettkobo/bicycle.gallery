#!/usr/bin/env node
const path = require('path');
const program = require('commander');
const checkVersion = require('./check-version')
const logger = require('./logger')
const warnings = require('./warnings')
const ora = require('ora')
const chalk = require('chalk')
const Metalsmith = require('metalsmith');
const render = require('consolidate').ejs.render;
const spawn = require('child_process').spawn;
const fs = require('fs')
const async = require('async')
var rm = require('rimraf')
const inquirer = require('inquirer')
const json = require('./json')
const token = 'd17a8e279ac1fdaf83369eb21fdcb6c5e3c5e972';//只有查询权限
//console.log(require('consolidate'))
program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create a new project with an official template'))
    console.log('    $ vue init webpack my-project')
    console.log()
    console.log(chalk.gray('    # create a new project straight from a github template'))
    console.log('    $ vue init username/repo my-project')
    console.log()
})

/**
 * Help.
 */

function help () {
    program.parse(process.argv)
    if (program.args.length < 1) return program.help()
}
help()


let dest = program.args[0];
const templatePath = path.resolve(__dirname, '../template');
const gitDownPath = path.resolve(__dirname,'../');
const cwd = process.cwd();
const spinner = ora('downloading template')
spinner.start();
checkVersion(download,nextwork,spinner)
//download()
/**
 * Build.
 */
let metalsmith;

/**
 * Prompt plugin.
 *
 * @param {Object} files
 * @param {Metalsmith} metalsmith
 * @param {Function} done
 */
function download(){
    rm(templatePath,err=>{
        if (err) throw err
        setTimeout(()=>{
            var process = spawn('git', ['clone','https://github.com/ycka/template.git'],{cwd:gitDownPath});
            process.stderr.on('data', (data) => {
                console.log(`stderr: ${data}`);
            });
            process.on('close', function(status) {
                nextwork()
            });
        },500)
        
    })
    
}
/**
 * 
 */
function nextwork(){
    metalsmith = Metalsmith(path.join(__dirname,"../template"))
        .ignore(['.git'])
        .source(path.join(__dirname,"../template"))
        .clean(false)
        //.use(download)
        .use(ask)
        .use(template)
        .destination(path.resolve(cwd,dest))
        .build(function(err){
            if(err){
                console.log(err)
            }
        });
}

/**
 * Prompt plugin.
 *
 * @param {Object} files
 * @param {Metalsmith} metalsmith
 * @param {Function} done
 */

function ask(files, metalsmith, done){
    spinner.stop()
    var metadata = metalsmith.metadata();
    const length = attributeCount(metalsmith);
    async.eachSeries(json, function run(key, next){
        prompts(key,next,metalsmith,done,length)
    });
}

/**
 * Template in place plugin.
 *
 * @param {Object} files
 * @param {Metalsmith} metalsmith
 * @param {Function} done
 */

function template(files, metalsmith, done){
  var keys = Object.keys(files);
  var metadata = metalsmith.metadata();
  async.each(keys, run, done);
  function run(file, done){
    var str = files[file].contents.toString();
    render(str, metadata, function(err, res){
        if (err) {
            console.log('错误')
            err.message = `[${file}] ${err.message}`
            return done(err)
        }
        files[file].contents = new Buffer(res);
        console.log('url:'+chalk.gray(file)+' date:'+chalk.yellow(files[file].stats.birthtime)+' size:'+chalk.green(Math.ceil(files[file].stats.size/1024)+"KB"))
        return done();
    });
  }
}


var attributeCount = function(obj) {
    var count = 0;
    for(var i in obj) {
        if(obj.hasOwnProperty(i)) { 
            count++;
        }
    }
    return count;
}

/**
 * Template in place plugin.
 *
 * @param {Object} say
 * @param {Function} next
 * @param {Object} metalsmith
 */
function prompts(ops,next,metalsmith,done,length){
    inquirer.prompt([{
        type: ops.confirm,
        message: ops.message,
        name: ops.name,
        default:ops.default
      }]).then(answers => {
          
        if(typeof metalsmith=='object'){
            metalsmith[Object.keys(answers)]=answers[ops.name]
        }
        if(attributeCount(metalsmith)==json.length+length){
            done&&done()
        }
        next()
      }).catch((err)=>{
          console.log(err)
      })
}